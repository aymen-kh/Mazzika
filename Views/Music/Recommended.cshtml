@model List<Mazzika.Models.Video>

@{
    ViewData["Title"] = "Recommended Music";
}

<div class="container-fluid mt-4">
    <!-- Category filters -->
    <div class="category-filters mb-4 d-flex overflow-auto">
        <button class="btn btn-dark me-2 active">All</button>
        <button class="btn btn-outline-dark me-2">Music</button>
        <button class="btn btn-outline-dark me-2">Arabic Music</button>
        <button class="btn btn-outline-dark me-2">Mixes</button>
        <button class="btn btn-outline-dark me-2">Albums</button>
        <button class="btn btn-outline-dark me-2">Cheb Mami</button>
        <button class="btn btn-outline-dark me-2">French hip hop music</button>
        <button class="btn btn-outline-dark me-2">Contemporary R&B</button>
        <button class="btn btn-outline-dark me-2">Harps</button>
        <button class="btn btn-outline-dark me-2">Live</button>
        <button class="btn btn-outline-dark me-2">Disco</button>
    </div>

    @if (!string.IsNullOrEmpty(ViewBag.LoginMessage))
    {
        <div class="alert alert-info">
            <p>@ViewBag.LoginMessage</p>
            <a class="btn btn-primary" asp-controller="Account" asp-action="Login">Login with YouTube</a>
        </div>
    }
    else if (Model != null && Model.Any())
    {
        <!-- Recently played section -->
        <div class="mb-5">
            <h5 class="mb-3">Recently played</h5>
            <div class="row">
                @foreach (var video in Model.Take(6))
                {
                    <div class="col-md-2 mb-4">
                        <div class="card h-100 border-0" data-video-id="@video.Id" data-title="@video.Title" 
                             data-description="@video.Description" data-thumbnail="@video.ThumbnailUrl" 
                             data-published-at="@video.PublishedAt" data-channel-title="@video.ChannelTitle">
                            <div class="position-relative">
                                <img src="@video.ThumbnailUrl" class="card-img-top rounded" alt="@video.Title">
                                <div class="play-overlay">
                                    <i class="bi bi-play-circle-fill"></i>
                                </div>
                            </div>
                            <div class="card-body px-0 py-2">
                                <h6 class="card-title mb-1">@video.Title</h6>
                                <p class="card-text text-muted small mb-0">@video.ChannelTitle</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Mix section -->
        <div class="mb-5">
            <h5 class="mb-3">Mix - Arabic Music</h5>
            <div class="row">
                @foreach (var video in Model.Skip(6).Take(6))
                {
                    <div class="col-md-2 mb-4">
                        <div class="card h-100 border-0" data-video-id="@video.Id" data-title="@video.Title" 
                             data-description="@video.Description" data-thumbnail="@video.ThumbnailUrl" 
                             data-published-at="@video.PublishedAt" data-channel-title="@video.ChannelTitle">
                            <div class="position-relative">
                                <img src="@video.ThumbnailUrl" class="card-img-top rounded" alt="@video.Title">
                                <div class="play-overlay">
                                    <i class="bi bi-play-circle-fill"></i>
                                </div>
                            </div>
                            <div class="card-body px-0 py-2">
                                <h6 class="card-title mb-1">@video.Title</h6>
                                <p class="card-text text-muted small mb-0">@video.ChannelTitle</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Trending section -->
        <div class="mb-5">
            <h5 class="mb-3">Trending in Tunisia</h5>
            <div class="row">
                @foreach (var video in Model.Skip(12).Take(6))
                {
                    <div class="col-md-2 mb-4">
                        <div class="card h-100 border-0" data-video-id="@video.Id" data-title="@video.Title" 
                             data-description="@video.Description" data-thumbnail="@video.ThumbnailUrl" 
                             data-published-at="@video.PublishedAt" data-channel-title="@video.ChannelTitle">
                            <div class="position-relative">
                                <img src="@video.ThumbnailUrl" class="card-img-top rounded" alt="@video.Title">
                                <div class="play-overlay">
                                    <i class="bi bi-play-circle-fill"></i>
                                </div>
                            </div>
                            <div class="card-body px-0 py-2">
                                <h6 class="card-title mb-1">@video.Title</h6>
                                <p class="card-text text-muted small mb-0">@video.ChannelTitle</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <p>No recommended videos available at the moment.</p>
            <a class="btn btn-primary" asp-controller="Account" asp-action="Login">Sign in for personalized recommendations</a>
        </div>
    }
</div>

<style>
    .category-filters {
        white-space: nowrap;
        -ms-overflow-style: none;
        scrollbar-width: none;
    }

    .category-filters::-webkit-scrollbar {
        display: none;
    }

    .card {
        transition: transform 0.2s;
    }

    .card:hover {
        transform: scale(1.05);
        cursor: pointer;
    }

    .card-title {
        font-size: 0.9rem;
        overflow: hidden;
        text-overflow: ellipsis;
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
    }

    .play-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
        color: white;
        opacity: 0;
        transition: opacity 0.2s;
    }

    .card:hover .play-overlay {
        opacity: 1;
    }
</style>

@section Scripts {
    <script>
        // Add click handlers for category filters
        document.querySelectorAll('.category-filters .btn').forEach(button => {
            button.addEventListener('click', function() {
                // Remove active class from all buttons
                document.querySelectorAll('.category-filters .btn').forEach(btn => {
                    btn.classList.remove('active');
                    btn.classList.remove('btn-dark');
                    btn.classList.add('btn-outline-dark');
                });
                
                // Add active class to clicked button
                this.classList.remove('btn-outline-dark');
                this.classList.add('btn-dark');
                this.classList.add('active');
            });
        });

        function playVideo(videoId, title, description, thumbnailUrl, publishedAt, channelTitle) {
            if (!playlist.includes(videoId)) {
                playlist.push(videoId);
                playlistTitles.push(title);
                playlistThumbs.push(thumbnailUrl);
                currentIndex = playlist.length - 1;
            }

            // Update UI
            document.getElementById('player-thumbnail').src = thumbnailUrl;
            document.getElementById('song-title').innerText = title;
            document.getElementById('player-bar').style.display = 'flex';

            // Play video
            if (!player) {
                player = new YT.Player('player', {
                    height: '0',
                    width: '0',
                    videoId: videoId,
                    events: {
                        'onReady': onPlayerReady,
                        'onStateChange': onPlayerStateChange
                    }
                });
            } else {
                player.loadVideoById(videoId);
            }

            // Track play count
            fetch('/Music/AddToTopTracks', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    id: videoId,
                    title: title,
                    description: description,
                    thumbnailUrl: thumbnailUrl,
                    publishedAt: publishedAt,
                    channelTitle: channelTitle
                })
            }).then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
            }).catch(error => {
                console.error('Error updating play count:', error);
            });
        }
    </script>
}