@model List<Mazzika.Models.Video>
@inject Mazzika.Data.MusicDbContext DbContext

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">

<style>
    body {
        background-color: #121212;
        color: #fff;
    }
    .card {
        background-color: rgba(30, 30, 30, 0.6);
        backdrop-filter: blur(10px);
        border-radius: 8px;
        overflow: hidden;
        transition: transform 0.2s;
    }
    .card:hover {
        transform: scale(1.05);
    }
    .btn-primary {
        background-color: #1db954;
        border: none;
    }
    .btn-primary:hover {
        background-color: #1ed760;
    }
    .search-bar {
        margin-bottom: 30px;
    }
    #player-bar {
        position: fixed;
        bottom: 0;
        left: 0;
        right: 0;
        background-color: #1e1e1e;
        padding: 10px 20px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        z-index: 999;
    }
    #controls {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    #progress-container {
        width: 100%;
    }
    #progress {
        width: 100%;
    }
    .mix-overlay {
        background: linear-gradient(rgba(0,0,0,0.3), rgba(0,0,0,0.7));
        opacity: 0;
        transition: opacity 0.3s ease;
    }
    .card:hover .mix-overlay {
        opacity: 1;
    }
    .card-img-container {
        overflow: hidden;
    }
    .rounded-circle {
        aspect-ratio: 1;
        object-fit: cover;
    }
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
    }
    .section-title {
        font-size: 1.5rem;
        font-weight: 700;
        margin: 0;
    }
    .see-all {
        color: #1db954;
        text-decoration: none;
        font-weight: 500;
    }
    .see-all:hover {
        text-decoration: underline;
        color: #1ed760;
    }
    .play-count {
        position: absolute;
        bottom: 8px;
        right: 8px;
        background: rgba(0, 0, 0, 0.7);
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.75rem;
        display: flex;
        align-items: center;
        gap: 4px;
    }
    .music-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
        gap: 1.5rem;
        margin-bottom: 2.5rem;
    }
    .card-img-top {
        aspect-ratio: 16/9;
        object-fit: cover;
    }
    .card-body {
        padding: 1rem;
    }
    .card-title {
        font-size: 0.9rem;
        font-weight: 500;
        margin-bottom: 0.25rem;
        line-height: 1.3;
    }
    .card-text {
        font-size: 0.8rem;
        opacity: 0.7;
    }
    .play-overlay {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2.5rem;
        color: rgba(255, 255, 255, 0.8);
        display: none;
    }
    .card:hover .play-overlay {
        display: block;
    }
</style>

<div class="container-fluid mt-4">
    <form method="get" asp-action="Index" class="search-bar">
        <div class="input-group">
            <input type="text" name="searchQuery" class="form-control" placeholder="Search for songs..." value="@ViewBag.SearchQuery">
            <button class="btn btn-primary" type="submit">Search</button>
        </div>
    </form>

    <div class="quick-picks mb-5">
        <div class="section-header">
            <h2 class="section-title">Quick picks</h2>
            <a href="#" class="see-all">See all</a>
        </div>
        <div class="music-grid">
            @foreach (var video in Model.Take(6))
            {
                <div class="card h-100" data-video-id="@video.Id" data-title="@video.Title" 
                     data-description="@video.Description" data-thumbnail="@video.ThumbnailUrl" 
                     data-published-at="@video.PublishedAt" data-channel-title="@video.ChannelTitle">
                    <div class="position-relative">
                        <img src="@video.ThumbnailUrl" class="card-img-top" alt="@video.Title">
                        <div class="play-overlay">
                            <i class="bi bi-play-circle-fill"></i>
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-truncate">@video.Title</h5>
                        <p class="card-text">@video.ChannelTitle</p>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="top-tracks mb-5">
        <div class="section-header">
            <h2 class="section-title">Your Top Tracks</h2>
            <a href="/Music/TopTracks" class="see-all">View all</a>
        </div>
        <div class="music-grid">
            @foreach (var track in DbContext.TopTracks.OrderByDescending(t => t.PlayCount).Take(6))
            {
                <div class="card h-100" data-video-id="@track.VideoId" data-title="@track.Title" 
                     data-description="@track.Description" data-thumbnail="@track.ThumbnailUrl" 
                     data-published-at="@track.PublishedAt" data-channel-title="@track.ChannelTitle">
                    <div class="position-relative">
                        <img src="@track.ThumbnailUrl" class="card-img-top" alt="@track.Title">
                        <div class="play-count">
                            <i class="bi bi-play-fill"></i>
                            <span>@track.PlayCount</span>
                        </div>
                        <div class="play-overlay">
                            <i class="bi bi-play-circle-fill"></i>
                        </div>
                    </div>
                    <div class="card-body">
                        <h5 class="card-title text-truncate">@track.Title</h5>
                        <p class="card-text">@track.ChannelTitle</p>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="recommended-artists mb-5">
        <div class="section-header">
            <h2 class="section-title">Recommended artists</h2>
            <a href="#" class="see-all">See all</a>
        </div>
        <div class="music-grid">
            @foreach (var video in Model.Skip(12).Take(6))
            {
                <div class="card h-100" data-video-id="@video.Id" data-title="@video.Title" 
                     data-description="@video.Description" data-thumbnail="@video.ThumbnailUrl" 
                     data-published-at="@video.PublishedAt" data-channel-title="@video.ChannelTitle">
                    <div class="card-img-container position-relative">
                        <img src="@video.ThumbnailUrl" class="card-img-top rounded-circle" alt="@video.ChannelTitle">
                        <div class="play-overlay">
                            <i class="bi bi-play-circle-fill"></i>
                        </div>
                    </div>
                    <div class="card-body text-center">
                        <h5 class="card-title">@video.ChannelTitle</h5>
                        <p class="card-text">Artist</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Player Bar -->
<div id="player-bar" style="display: none;">
    <div id="controls">
        <img id="player-thumbnail" src="" alt="Thumbnail" width="60" height="60" class="rounded">
        <div id="song-info">
            <div id="song-title"></div>
        </div>
        <button class="btn btn-link text-light" onclick="prevSong()">
            <i class="bi bi-skip-start-fill" style="font-size: 1.8rem;"></i>
        </button>
        <button class="btn btn-link text-light" onclick="togglePlay()">
            <i id="play-pause-icon" class="bi bi-play-fill" style="font-size: 2rem;"></i>
        </button>
        <button class="btn btn-link text-light" onclick="nextSong()">
            <i class="bi bi-skip-end-fill" style="font-size: 1.8rem;"></i>
        </button>
    </div>
    <div id="progress-container">
    <div class="d-flex justify-content-between">
        <span id="current-time">0:00</span>
        <span id="total-duration">0:00</span>
    </div>
    <input type="range" id="progress" value="0" step="1">
</div>
<div id="loading-spinner" class="text-center text-light" style="display: none;">
    <div class="spinner-border text-light" role="status" style="width: 1.5rem; height: 1.5rem;">
        <span class="visually-hidden">Loading...</span>
    </div>
</div>

</div>

<!-- YouTube Player Script -->
<div id="player" style="display:none;"></div>

@section Scripts {
<!-- Player initialization and event handlers -->
<script>
    let playlist = [];
    let playlistTitles = [];
    let playlistThumbs = [];
    let currentIndex = 0;
    let player;
    let playPauseIcon;
    let progressSlider;
    let isSeeking = false;
    let updateInterval;

    function onYouTubeIframeAPIReady() {
        player = new YT.Player('player', {
            height: '0',
            width: '0',
            videoId: '',
            events: {
                'onReady': onPlayerReady,
                'onStateChange': onPlayerStateChange
            }
        });
    }

    function onPlayerReady(event) {
        // Player ready
    }

    function onPlayerStateChange(event) {
        if (event.data === YT.PlayerState.PLAYING) {
            startUpdatingProgress();
            playPauseIcon.className = 'bi bi-pause-fill';
        } else {
            playPauseIcon.className = 'bi bi-play-fill';
        }
    }

   function startUpdatingProgress() {
    clearInterval(updateInterval);
    updateInterval = setInterval(() => {
        if (player && player.getDuration) {
            const duration = player.getDuration();
            const currentTime = player.getCurrentTime();

            if (!isSeeking) {
                progressSlider.max = duration;
                progressSlider.value = currentTime;

                document.getElementById('current-time').textContent = formatTime(currentTime);
                document.getElementById('total-duration').textContent = formatTime(duration);
            }

            // Auto play next when song ends
            if (player.getPlayerState() === YT.PlayerState.ENDED) {
                nextSong();
            }
        }
    }, 500);
}


    document.addEventListener('DOMContentLoaded', () => {
        playPauseIcon = document.getElementById('play-pause-icon');
        progressSlider = document.getElementById('progress');

        progressSlider.addEventListener('input', () => {
            isSeeking = true;
        });

        progressSlider.addEventListener('change', () => {
            player.seekTo(progressSlider.value, true);
            isSeeking = false;
        });

        document.querySelectorAll('.card').forEach(card => {
            card.addEventListener('click', function() {
                playVideo(
                    this.dataset.videoId,
                    this.dataset.title,
                    this.dataset.description,
                    this.dataset.thumbnail,
                    this.dataset.publishedAt,
                    this.dataset.channelTitle
                );
            });
        });
    });

    function playVideo(videoId, title, description, thumbnailUrl, publishedAt, channelTitle) {
        console.log('Playing video:', { videoId, title, description, thumbnailUrl, publishedAt, channelTitle });

        // Add to playlist
        playlist.push(videoId);
        playlistTitles.push(title);
        playlistThumbs.push(thumbnailUrl);
        currentIndex = playlist.length - 1;

        // Initialize or load video
        if (!player) {
            player = new YT.Player('player', {
                height: '0',
                width: '0',
                videoId: videoId,
                events: {
                    'onReady': onPlayerReady,
                    'onStateChange': onPlayerStateChange
                }
            });
        } else {
            player.loadVideoById({
                videoId: videoId,
                startSeconds: 0
            });
        }

        // Update UI
        document.getElementById('player-thumbnail').src = thumbnailUrl;
        document.getElementById('song-title').innerText = title;
        document.getElementById('player-bar').style.display = 'flex';

        // Track play in database
        const video = {
            id: videoId,
            title: title,
            description: description,
            thumbnailUrl: thumbnailUrl,
            publishedAt: publishedAt,
            channelTitle: channelTitle
        };

        fetch('/Music/AddToTopTracks', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(video)
        }).then(response => {
            if (response.ok) {
                console.log('Video added to top tracks successfully.');
            } else {
                console.error('Failed to add video to top tracks. Response status:', response.status);
                response.text().then(text => console.error('Response body:', text));
            }
        }).catch(error => {
            console.error('Error adding video to top tracks:', error);
        });
    }

    function loadVideo(index, autoplay = false) {
    const id = playlist[index];
    const title = playlistTitles[index];
    const thumbnail = playlistThumbs[index];

    // Show spinner
    document.getElementById('loading-spinner').style.display = 'block';

    document.getElementById('player-thumbnail').src = thumbnail;
    document.getElementById('song-title').innerText = title;

    player.loadVideoById(id);

    document.getElementById('player-bar').style.display = 'flex';

    if (autoplay) {
        player.playVideo();
    }

    // Wait a bit to hide spinner
    setTimeout(() => {
        document.getElementById('loading-spinner').style.display = 'none';
    }, 1200);
}

    function togglePlay() {
        const state = player.getPlayerState();
        if (state === YT.PlayerState.PLAYING) {
            player.pauseVideo();
        } else {
            player.playVideo();
        }
    }

    function nextSong() {
        currentIndex = (currentIndex + 1) % playlist.length;
        loadVideo(currentIndex, true);
    }

    function prevSong() {
        currentIndex = (currentIndex - 1 + playlist.length) % playlist.length;
        loadVideo(currentIndex, true);
    }
    function formatTime(seconds) {
    const min = Math.floor(seconds / 60);
    const sec = Math.floor(seconds % 60).toString().padStart(2, '0');
    return `${min}:${sec}`;
}

</script>
}
